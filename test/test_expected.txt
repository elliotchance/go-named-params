//
//

package main

// Overview
// ========
//
// This file is used to test the added functionality of named parameters for
// functions in Go. The individual function names follow a pattern:
//
// anon or named: Whether the function would be a pure (anonymous function) or
//     a function with named parameters.
// test number: A sequential number to indicate different versions of the same
//     group.
// version: Represents the version of test, where:
//     0: no arguments
//     1: a single argument
//     2: multiple arguments
//     3: multiword argument
//     4: return value
//     5: multiple arguments short syntax
//
// The functions themselves do not contain any body becuase if something goes
// wrong with the regular expression, the compiler will throw an error.

// Brackets
// ========

// Brackets in single lines comments: (()

/**
 * Brackets in multiline comments: (()
 */

// Pure Go functions
// =================
//
// These things are pure Go, they are here as to make sure that the parser
// doesn't mess with any of the existing syntax:

func anon10() {
}
func anon11(name string) {
}
func anon12(a int,
  b int) {
}
func anon13(c chan int) {
}
func anon14(a int, b int) int {
  return a + b
}
func anon15(a,
  b int, c string) int {
  return a + b * len(c)
}

// Named Parameters
// ================

func named11_name(name  string) {
}
func named12_a_b(a  int,
  b  int) {
}
func named13_c(c  chan int) {
}
func named14_a_b(a  int,  b  int) int {
  return a + b
}
func named15_a_b_c(a  int,
  b  int,  c  string) int {
  return a + b * len(c)
}

// Helper functions
func check(result, expectedResult int) {
  if result != expectedResult {
    panic("Failed!")
  }
}

func main() {
  var result int

  // Ignore brackets in strings and characters
  anon11("a(a")
  anon11(string('('))
  anon11("a(\"a")
  anon11(string('\''))

  // Simply calling them.
  anon10()
  anon11("bob")
  anon12(3, 2)
  anon13(make(chan int))
  result = anon14(3, 5)
  check(result, 8)
  result = anon15(3, 2, "foo")
  check(result, 9)

  named11_name( "bob")
  named12_a_b( 3,  2)
  named13_c( make(chan int))
  result = named14_a_b( 2,  3)
  check(result, 5)
  result = named15_a_b_c( 3,  2,  "foo")
  check(result, 9)

  // Different combinations of nesting.
  result = named14_a_b( named14_a_b( 7,  4),  2)
  check(result, 13)
  result = named14_a_b( anon14(7, 4),  2)
  check(result, 13)
  result = anon14(named14_a_b( 7,  4), 2)
  check(result, 13)

  // Grouping brackets should not be affected.
  named12_a_b( 3,  (2 + 3))
  result = (5 * 2)
  check(result, 10)
  result = ((((((((1 + 3))))))))
  check(result, 4)

  // Combinations of new lines.
  anon10(
  )
  named12_a_b(
 3,  (2 + 3),
  )
}
